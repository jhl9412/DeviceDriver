
start.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <reset>:
	.globl	reset
	.globl	save_boot_params_ret

reset:
	/* Allow the board to save important registers */
	b	save_boot_params
   0:	eafffffe 	b	54 <save_boot_params>

00000004 <save_boot_params_ret>:
save_boot_params_ret:
	/*
	 * disable interrupts (FIQ and IRQ), also set the cpu to SVC32 mode,
	 * except if in HYP mode already
	 */
	mrs	r0, cpsr
   4:	e10f0000 	mrs	r0, CPSR
	and	r1, r0, #0x1f		@ mask mode bits
   8:	e200101f 	and	r1, r0, #31
	teq	r1, #0x1a		@ test for HYP mode
   c:	e331001a 	teq	r1, #26
	bicne	r0, r0, #0x1f		@ clear all mode bits
  10:	13c0001f 	bicne	r0, r0, #31
	orrne	r0, r0, #0x13		@ set SVC mode
  14:	13800013 	orrne	r0, r0, #19
	orr	r0, r0, #0xc0		@ disable FIQ and IRQ
  18:	e38000c0 	orr	r0, r0, #192	; 0xc0
	msr	cpsr,r0
  1c:	e129f000 	msr	CPSR_fc, r0
 * (OMAP4 spl TEXT_BASE is not 32 byte aligned.
 * Continue to use ROM code vector only in OMAP4 spl)
 */
#if !(defined(CONFIG_OMAP44XX) && defined(CONFIG_SPL_BUILD))
	/* Set V=0 in CP15 SCTLR register - for VBAR to point to vector */
	mrc	p15, 0, r0, c1, c0, 0	@ Read CP15 SCTLR Register
  20:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic	r0, #CR_V		@ V = 0
  24:	e3c00a02 	bic	r0, r0, #8192	; 0x2000
	mcr	p15, 0, r0, c1, c0, 0	@ Write CP15 SCTLR Register
  28:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

	/* Set vector address in CP15 VBAR register */
	ldr	r0, =_start
  2c:	e59f0124 	ldr	r0, [pc, #292]	; 158 <delay2+0x1c>
	mcr	p15, 0, r0, c12, c0, 0	@Set VBAR
  30:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
#endif

	/* the mask ROM code should have PLL and others stable */
#ifndef CONFIG_SKIP_LOWLEVEL_INIT
	bl	cpu_init_cp15
  34:	ebfffffe 	bl	58 <cpu_init_cp15>
	bl	cpu_init_crit
  38:	ebfffffe 	bl	dc <cpu_init_crit>
#endif
	bl udoo_ledtest
  3c:	ebfffffe 	bl	e0 <udoo_ledtest>
	bl	_main
  40:	ebfffffe 	bl	0 <_main>

00000044 <c_runtime_cpu_setup>:
ENTRY(c_runtime_cpu_setup)
/*
 * If I-cache is enabled invalidate it
 */
#ifndef CONFIG_SYS_ICACHE_OFF
	mcr	p15, 0, r0, c7, c5, 0	@ invalidate icache
  44:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}
	mcr     p15, 0, r0, c7, c10, 4	@ DSB
  48:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
	mcr     p15, 0, r0, c7, c5, 4	@ ISB
  4c:	ee070f95 	mcr	15, 0, r0, cr7, cr5, {4}
#endif

	bx	lr
  50:	e12fff1e 	bx	lr

00000054 <save_boot_params>:
 * Stack pointer is not yet initialized at this moment
 * Don't save anything to stack even if compiled with -O0
 *
 *************************************************************************/
ENTRY(save_boot_params)
	b	save_boot_params_ret		@ back to my caller
  54:	eafffffe 	b	4 <save_boot_params_ret>

00000058 <cpu_init_cp15>:
 *************************************************************************/
ENTRY(cpu_init_cp15)
	/*
	 * Invalidate L1 I/D
	 */
	mov	r0, #0			@ set up for MCR
  58:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c8, c7, 0	@ invalidate TLBs
  5c:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
	mcr	p15, 0, r0, c7, c5, 0	@ invalidate icache
  60:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}
	mcr	p15, 0, r0, c7, c5, 6	@ invalidate BP array
  64:	ee070fd5 	mcr	15, 0, r0, cr7, cr5, {6}
	mcr     p15, 0, r0, c7, c10, 4	@ DSB
  68:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
	mcr     p15, 0, r0, c7, c5, 4	@ ISB
  6c:	ee070f95 	mcr	15, 0, r0, cr7, cr5, {4}

	/*
	 * disable MMU stuff and caches
	 */
	mrc	p15, 0, r0, c1, c0, 0
  70:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic	r0, r0, #0x00002000	@ clear bits 13 (--V-)
  74:	e3c00a02 	bic	r0, r0, #8192	; 0x2000
	bic	r0, r0, #0x00000007	@ clear bits 2:0 (-CAM)
  78:	e3c00007 	bic	r0, r0, #7
	orr	r0, r0, #0x00000002	@ set bit 1 (--A-) Align
  7c:	e3800002 	orr	r0, r0, #2
	orr	r0, r0, #0x00000800	@ set bit 11 (Z---) BTB
  80:	e3800b02 	orr	r0, r0, #2048	; 0x800
#ifdef CONFIG_SYS_ICACHE_OFF
	bic	r0, r0, #0x00001000	@ clear bit 12 (I) I-cache
#else
	orr	r0, r0, #0x00001000	@ set bit 12 (I) I-cache
  84:	e3800a01 	orr	r0, r0, #4096	; 0x1000
#endif
	mcr	p15, 0, r0, c1, c0, 0
  88:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	orr	r0, r0, #1 << 11	@ set bit #11
	mcr	p15, 0, r0, c1, c0, 0	@ write system control register
#endif

#if (defined(CONFIG_ARM_ERRATA_742230) || defined(CONFIG_ARM_ERRATA_794072))
	mrc	p15, 0, r0, c15, c0, 1	@ read diagnostic register
  8c:	ee1f0f30 	mrc	15, 0, r0, cr15, cr0, {1}
	orr	r0, r0, #1 << 4		@ set bit #4
  90:	e3800010 	orr	r0, r0, #16
	mcr	p15, 0, r0, c15, c0, 1	@ write diagnostic register
  94:	ee0f0f30 	mcr	15, 0, r0, cr15, cr0, {1}
#endif

#ifdef CONFIG_ARM_ERRATA_743622
	mrc	p15, 0, r0, c15, c0, 1	@ read diagnostic register
  98:	ee1f0f30 	mrc	15, 0, r0, cr15, cr0, {1}
	orr	r0, r0, #1 << 6		@ set bit #6
  9c:	e3800040 	orr	r0, r0, #64	; 0x40
	mcr	p15, 0, r0, c15, c0, 1	@ write diagnostic register
  a0:	ee0f0f30 	mcr	15, 0, r0, cr15, cr0, {1}
#endif

#ifdef CONFIG_ARM_ERRATA_751472
	mrc	p15, 0, r0, c15, c0, 1	@ read diagnostic register
  a4:	ee1f0f30 	mrc	15, 0, r0, cr15, cr0, {1}
	orr	r0, r0, #1 << 11	@ set bit #11
  a8:	e3800b02 	orr	r0, r0, #2048	; 0x800
	mcr	p15, 0, r0, c15, c0, 1	@ write diagnostic register
  ac:	ee0f0f30 	mcr	15, 0, r0, cr15, cr0, {1}
#endif
#ifdef CONFIG_ARM_ERRATA_761320
	mrc	p15, 0, r0, c15, c0, 1	@ read diagnostic register
  b0:	ee1f0f30 	mrc	15, 0, r0, cr15, cr0, {1}
	orr	r0, r0, #1 << 21	@ set bit #21
  b4:	e3800602 	orr	r0, r0, #2097152	; 0x200000
	mcr	p15, 0, r0, c15, c0, 1	@ write diagnostic register
  b8:	ee0f0f30 	mcr	15, 0, r0, cr15, cr0, {1}
#endif

	mov	r5, lr			@ Store my Caller
  bc:	e1a0500e 	mov	r5, lr
	mrc	p15, 0, r1, c0, c0, 0	@ r1 has Read Main ID Register (MIDR)
  c0:	ee101f10 	mrc	15, 0, r1, cr0, cr0, {0}
	mov	r3, r1, lsr #20		@ get variant field
  c4:	e1a03a21 	lsr	r3, r1, #20
	and	r3, r3, #0xf		@ r3 has CPU variant
  c8:	e203300f 	and	r3, r3, #15
	and	r4, r1, #0xf		@ r4 has CPU revision
  cc:	e201400f 	and	r4, r1, #15
	mov	r2, r3, lsl #4		@ shift variant field for combined value
  d0:	e1a02203 	lsl	r2, r3, #4
	orr	r2, r4, r2		@ r2 has combined CPU variant + revision
  d4:	e1842002 	orr	r2, r4, r2
	pop	{r1-r5}			@ Restore the cpu info - fall through

skip_errata_621766:
#endif

	mov	pc, r5			@ back to my caller
  d8:	e1a0f005 	mov	pc, r5

000000dc <cpu_init_crit>:
	 * Jump to board specific initialization...
	 * The Mask ROM will have already initialized
	 * basic memory. Go here to bump up clock rate and handle
	 * wake up conditions.
	 */
	b	lowlevel_init		@ go setup pll,mux,memory
  dc:	eafffffe 	b	0 <lowlevel_init>

000000e0 <udoo_ledtest>:
ENDPROC(cpu_init_crit)
#endif

ENTRY(udoo_ledtest)
	ldr r0,=0x020E0300
  e0:	e59f0074 	ldr	r0, [pc, #116]	; 15c <delay2+0x20>
	ldr r1,=0x05
  e4:	e3a01005 	mov	r1, #5
	str r1,[r0,#0x40]
  e8:	e5801040 	str	r1, [r0, #64]	; 0x40
	str r1,[r0,#0x3C]
  ec:	e580103c 	str	r1, [r0, #60]	; 0x3c
	str r1,[r0,#0x48]
  f0:	e5801048 	str	r1, [r0, #72]	; 0x48
	str r1,[r0,#0x4C]
  f4:	e580104c 	str	r1, [r0, #76]	; 0x4c

	ldr r0,=0x0209C000
  f8:	e59f0060 	ldr	r0, [pc, #96]	; 160 <delay2+0x24>
	ldr r1,=0x000f0000
  fc:	e3a0180f 	mov	r1, #983040	; 0xf0000
	str r1,[r0,#0x04]
 100:	e5801004 	str	r1, [r0, #4]
	ldr r1,=0x10000;
 104:	e3a01801 	mov	r1, #65536	; 0x10000
	mov r2, #4
 108:	e3a02004 	mov	r2, #4

0000010c <ledloop1>:
ledloop1:
	str r1, [r0]
 10c:	e5801000 	str	r1, [r0]
	ldr r3,=0x10000000
 110:	e3a03201 	mov	r3, #268435456	; 0x10000000

00000114 <delay1>:
delay1:
	subs r3,r3, #1
 114:	e2533001 	subs	r3, r3, #1
	bne delay1
 118:	1afffffd 	bne	114 <delay1>
	mov r1, r1, LSL #1
 11c:	e1a01081 	lsl	r1, r1, #1
	subs r2, r2, #1
 120:	e2522001 	subs	r2, r2, #1
	bne ledloop1
 124:	1afffff8 	bne	10c <ledloop1>
	str r2, [r0]
 128:	e5802000 	str	r2, [r0]
	
	ldr r1,=0x80000;
 12c:	e3a01702 	mov	r1, #524288	; 0x80000
	mov r2, #4
 130:	e3a02004 	mov	r2, #4

00000134 <ledloop2>:
ledloop2:
	str r1, [r0]
 134:	e5801000 	str	r1, [r0]
	ldr r3,=0x10000000
 138:	e3a03201 	mov	r3, #268435456	; 0x10000000

0000013c <delay2>:
delay2:
	subs r3, r3, #1
 13c:	e2533001 	subs	r3, r3, #1
	bne delay2
 140:	1afffffd 	bne	13c <delay2>
	mov r1, r1, LSR #1
 144:	e1a010a1 	lsr	r1, r1, #1
	subs r2, r2, #1
 148:	e2522001 	subs	r2, r2, #1
	bne ledloop2
 14c:	1afffff8 	bne	134 <ledloop2>
	str r2, [r0]
 150:	e5802000 	str	r2, [r0]

	mov pc, lr
 154:	e1a0f00e 	mov	pc, lr
	ldr	r0, =_start
 158:	00000000 	.word	0x00000000
	ldr r0,=0x020E0300
 15c:	020e0300 	.word	0x020e0300
	ldr r0,=0x0209C000
 160:	0209c000 	.word	0x0209c000
